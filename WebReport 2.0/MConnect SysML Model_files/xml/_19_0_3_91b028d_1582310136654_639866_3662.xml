<?xml version="1.0" encoding="UTF-8"?><magicdraw><constraint classType="Constraint" humanType="Constraint" icon="MConnect SysML Model_files/icon_constraint_1323457920.jpg" id="_19_0_3_91b028d_1582310136654_639866_3662"><constrainedElement humanName="Constrained Element" mode="s,e"><constraintblock classType="Class" humanType="Constraint Block" icon="MConnect SysML Model_files/icon_constraintblock_2128263818.jpg" name="Transformation" refid="_19_0_3_91b028d_1582233160564_921570_689"/></constrainedElement><context classType="Class" humanName="Context" humanType="Constraint Block" icon="MConnect SysML Model_files/icon_constraintblock_2128263818.jpg" name="Transformation" refid="_19_0_3_91b028d_1582233160564_921570_689"/><documentation humanName="Documentation"/><name humanName="Name" mode="s,e">constraints</name><namespace classType="Class" humanName="Namespace" humanType="Constraint Block" icon="MConnect SysML Model_files/icon_constraintblock_2128263818.jpg" name="Transformation" refid="_19_0_3_91b028d_1582233160564_921570_689"/><ownedElement humanName="Owned Element"><opaqueexpression classType="OpaqueExpression" humanType="Opaque Expression" icon="MConnect SysML Model_files/icon_opaqueexpression_913955118.jpg" name="var outx,outy,outz,outux,outuy,outuz; var anglist = angin.split('|||'); var ux,uy,uz,angle,vector;  var xu2,yu2,zu2,xt2,yt2,zt2; xu2 = xu; yu2 = yu; zu2 = zu; xt2 = xt; yt2 = yt; zt2 = zt;                                                                                  if(anglist.length &gt;= 2) {   anglist.pop();   for (var i = 0; i &lt; anglist.length; i++) {     angle = parseFloat(anglist[i].split('|')[0]);     vector = anglist[i].split('|')[1];     ux = parseFloat(vector.split(',')[0]);     uy = parseFloat(vector.split(',')[1]);     uz = parseFloat(vector.split(',')[2]);      outx = xt2*Math.cos(angle*Math.PI/180) + (uy*zt2 -uz*yt2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xt2+uy*yt2+uz*zt2)*ux;     outy = yt2*Math.cos(angle*Math.PI/180) + (uz*xt2 -ux*zt2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xt2+uy*yt2+uz*zt2)*uy;     outz = zt2*Math.cos(angle*Math.PI/180) + (ux*yt2 -uy*xt2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xt2+uy*yt2+uz*zt2)*uz;     xt2 = outx     yt2 = outy     zt2 = outz        outux = xu2*Math.cos(angle*Math.PI/180) + (uy*zu2 -uz*yu2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xu2+uy*yu2+uz*zu2)*ux;     outuy = yu2*Math.cos(angle*Math.PI/180) + (uz*xu2 -ux*zu2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xu2+uy*yu2+uz*zu2)*uy;     outuz = zu2*Math.cos(angle*Math.PI/180) + (ux*yu2 -uy*xu2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xu2+uy*yu2+uz*zu2)*uz;     xu2 = outux     yu2 = outuy     zu2 = outuz }             }   xout = xin + xt2; yout = yin + yt2; zout = zin + zt2;   aout = ain + xr + ang*xu; bout = bin + yr + ang*yu; cout = cin + zr + ang*zu;  var angles = ''; if(ang != 0) {  angles = angin + ang.toString()+'|'+xu2.toString()+ ','+yu2.toString()+ ','+zu2.toString() + '|||';   angout = angles;                                                                                 } else if(ang == 0){ angout = angin; }" refid="_19_0_3_91b028d_1582310136655_42298_3663" text="var outx,outy,outz,outux,outuy,outuz;&#10;var anglist = angin.split('|||');&#10;var ux,uy,uz,angle,vector;&#10;&#10;var xu2,yu2,zu2,xt2,yt2,zt2;&#10;xu2 = xu;&#10;yu2 = yu;&#10;zu2 = zu;&#10;xt2 = xt;&#10;yt2 = yt;&#10;zt2 = zt;                                  &#10;                               &#10;              &#10;if(anglist.length &gt;= 2) {&#10;  anglist.pop();&#10;  for (var i = 0; i &lt; anglist.length; i++) {&#10;    angle = parseFloat(anglist[i].split('|')[0]);&#10;    vector = anglist[i].split('|')[1];&#10;    ux = parseFloat(vector.split(',')[0]);&#10;    uy = parseFloat(vector.split(',')[1]);&#10;    uz = parseFloat(vector.split(',')[2]);&#10;&#10;    outx = xt2*Math.cos(angle*Math.PI/180) + (uy*zt2 -uz*yt2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xt2+uy*yt2+uz*zt2)*ux;&#10;    outy = yt2*Math.cos(angle*Math.PI/180) + (uz*xt2 -ux*zt2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xt2+uy*yt2+uz*zt2)*uy;&#10;    outz = zt2*Math.cos(angle*Math.PI/180) + (ux*yt2 -uy*xt2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xt2+uy*yt2+uz*zt2)*uz;&#10;    xt2 = outx&#10;    yt2 = outy&#10;    zt2 = outz&#10;  &#10;    outux = xu2*Math.cos(angle*Math.PI/180) + (uy*zu2 -uz*yu2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xu2+uy*yu2+uz*zu2)*ux;&#10;    outuy = yu2*Math.cos(angle*Math.PI/180) + (uz*xu2 -ux*zu2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xu2+uy*yu2+uz*zu2)*uy;&#10;    outuz = zu2*Math.cos(angle*Math.PI/180) + (ux*yu2 -uy*xu2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xu2+uy*yu2+uz*zu2)*uz;&#10;    xu2 = outux&#10;    yu2 = outuy&#10;    zu2 = outuz&#10;}           &#10;&#10;}&#10;&#10;&#10;xout = xin + xt2;&#10;yout = yin + yt2;&#10;zout = zin + zt2; &#10;&#10;aout = ain + xr + ang*xu;&#10;bout = bin + yr + ang*yu;&#10;cout = cin + zr + ang*zu;&#10;&#10;var angles = '';&#10;if(ang != 0) { &#10;angles = angin + ang.toString()+'|'+xu2.toString()+ ','+yu2.toString()+ ','+zu2.toString() + '|||';  &#10;angout = angles;                                                                                &#10;} else if(ang == 0){&#10;angout = angin;&#10;}"/></ownedElement><owner classType="Class" humanName="Owner" humanType="Constraint Block" icon="MConnect SysML Model_files/icon_constraintblock_2128263818.jpg" mode="s,e" name="Transformation" refid="_19_0_3_91b028d_1582233160564_921570_689"/><qualifiedName humanName="Qualified Name" mode="e">Simulation::Kinematics::Example::Definitions::Transformation::constraints</qualifiedName><specification classType="OpaqueExpression" humanName="Specification" humanType="Opaque Expression" icon="MConnect SysML Model_files/icon_opaqueexpression_913955118.jpg" mode="s,e" name="var outx,outy,outz,outux,outuy,outuz; var anglist = angin.split('|||'); var ux,uy,uz,angle,vector;  var xu2,yu2,zu2,xt2,yt2,zt2; xu2 = xu; yu2 = yu; zu2 = zu; xt2 = xt; yt2 = yt; zt2 = zt;                                                                                  if(anglist.length &gt;= 2) {   anglist.pop();   for (var i = 0; i &lt; anglist.length; i++) {     angle = parseFloat(anglist[i].split('|')[0]);     vector = anglist[i].split('|')[1];     ux = parseFloat(vector.split(',')[0]);     uy = parseFloat(vector.split(',')[1]);     uz = parseFloat(vector.split(',')[2]);      outx = xt2*Math.cos(angle*Math.PI/180) + (uy*zt2 -uz*yt2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xt2+uy*yt2+uz*zt2)*ux;     outy = yt2*Math.cos(angle*Math.PI/180) + (uz*xt2 -ux*zt2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xt2+uy*yt2+uz*zt2)*uy;     outz = zt2*Math.cos(angle*Math.PI/180) + (ux*yt2 -uy*xt2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xt2+uy*yt2+uz*zt2)*uz;     xt2 = outx     yt2 = outy     zt2 = outz        outux = xu2*Math.cos(angle*Math.PI/180) + (uy*zu2 -uz*yu2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xu2+uy*yu2+uz*zu2)*ux;     outuy = yu2*Math.cos(angle*Math.PI/180) + (uz*xu2 -ux*zu2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xu2+uy*yu2+uz*zu2)*uy;     outuz = zu2*Math.cos(angle*Math.PI/180) + (ux*yu2 -uy*xu2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xu2+uy*yu2+uz*zu2)*uz;     xu2 = outux     yu2 = outuy     zu2 = outuz }             }   xout = xin + xt2; yout = yin + yt2; zout = zin + zt2;   aout = ain + xr + ang*xu; bout = bin + yr + ang*yu; cout = cin + zr + ang*zu;  var angles = ''; if(ang != 0) {  angles = angin + ang.toString()+'|'+xu2.toString()+ ','+yu2.toString()+ ','+zu2.toString() + '|||';   angout = angles;                                                                                 } else if(ang == 0){ angout = angin; }" refid="_19_0_3_91b028d_1582310136655_42298_3663" text="var outx,outy,outz,outux,outuy,outuz;&#10;var anglist = angin.split('|||');&#10;var ux,uy,uz,angle,vector;&#10;&#10;var xu2,yu2,zu2,xt2,yt2,zt2;&#10;xu2 = xu;&#10;yu2 = yu;&#10;zu2 = zu;&#10;xt2 = xt;&#10;yt2 = yt;&#10;zt2 = zt;                                  &#10;                               &#10;              &#10;if(anglist.length &gt;= 2) {&#10;  anglist.pop();&#10;  for (var i = 0; i &lt; anglist.length; i++) {&#10;    angle = parseFloat(anglist[i].split('|')[0]);&#10;    vector = anglist[i].split('|')[1];&#10;    ux = parseFloat(vector.split(',')[0]);&#10;    uy = parseFloat(vector.split(',')[1]);&#10;    uz = parseFloat(vector.split(',')[2]);&#10;&#10;    outx = xt2*Math.cos(angle*Math.PI/180) + (uy*zt2 -uz*yt2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xt2+uy*yt2+uz*zt2)*ux;&#10;    outy = yt2*Math.cos(angle*Math.PI/180) + (uz*xt2 -ux*zt2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xt2+uy*yt2+uz*zt2)*uy;&#10;    outz = zt2*Math.cos(angle*Math.PI/180) + (ux*yt2 -uy*xt2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xt2+uy*yt2+uz*zt2)*uz;&#10;    xt2 = outx&#10;    yt2 = outy&#10;    zt2 = outz&#10;  &#10;    outux = xu2*Math.cos(angle*Math.PI/180) + (uy*zu2 -uz*yu2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xu2+uy*yu2+uz*zu2)*ux;&#10;    outuy = yu2*Math.cos(angle*Math.PI/180) + (uz*xu2 -ux*zu2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xu2+uy*yu2+uz*zu2)*uy;&#10;    outuz = zu2*Math.cos(angle*Math.PI/180) + (ux*yu2 -uy*xu2)*Math.sin(angle*Math.PI/180) + (1-Math.cos(angle*Math.PI/180))*(ux*xu2+uy*yu2+uz*zu2)*uz;&#10;    xu2 = outux&#10;    yu2 = outuy&#10;    zu2 = outuz&#10;}           &#10;&#10;}&#10;&#10;&#10;xout = xin + xt2;&#10;yout = yin + yt2;&#10;zout = zin + zt2; &#10;&#10;aout = ain + xr + ang*xu;&#10;bout = bin + yr + ang*yu;&#10;cout = cin + zr + ang*zu;&#10;&#10;var angles = '';&#10;if(ang != 0) { &#10;angles = angin + ang.toString()+'|'+xu2.toString()+ ','+yu2.toString()+ ','+zu2.toString() + '|||';  &#10;angout = angles;                                                                                &#10;} else if(ang == 0){&#10;angout = angin;&#10;}"/><TO_DO humanName="To Do" mode="s,e"/><visibility humanName="Visibility">public</visibility><appearsIn><diagram classType="Diagram" humanType="Diagram" icon="MConnect SysML Model_files/icon_SysML Block Definition Diagram_867492930.jpg" name="Definitions" refid="_19_0_3_91b028d_1582232397596_200149_125"/></appearsIn></constraint></magicdraw>